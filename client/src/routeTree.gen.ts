/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as SplatImport } from './routes/$'
import { Route as IndexImport } from './routes/index'
import { Route as UserRegisterImport } from './routes/user/register'
import { Route as UserLoginImport } from './routes/user/login'
import { Route as SettingsRequestsImport } from './routes/settings/requests'
import { Route as SettingsProfileImport } from './routes/settings/profile'
import { Route as CarCarIdImport } from './routes/car/$carId'
import { Route as AdminDashboardImport } from './routes/admin/dashboard'
import { Route as TrackCarCarIdImport } from './routes/track/car/$carId'

// Create/Update Routes

const SearchRoute = SearchImport.update({
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const SplatRoute = SplatImport.update({
  path: '/$',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserRegisterRoute = UserRegisterImport.update({
  path: '/user/register',
  getParentRoute: () => rootRoute,
} as any)

const UserLoginRoute = UserLoginImport.update({
  path: '/user/login',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRequestsRoute = SettingsRequestsImport.update({
  path: '/settings/requests',
  getParentRoute: () => rootRoute,
} as any)

const SettingsProfileRoute = SettingsProfileImport.update({
  path: '/settings/profile',
  getParentRoute: () => rootRoute,
} as any)

const CarCarIdRoute = CarCarIdImport.update({
  path: '/car/$carId',
  getParentRoute: () => rootRoute,
} as any)

const AdminDashboardRoute = AdminDashboardImport.update({
  path: '/admin/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const TrackCarCarIdRoute = TrackCarCarIdImport.update({
  path: '/track/car/$carId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardImport
      parentRoute: typeof rootRoute
    }
    '/car/$carId': {
      id: '/car/$carId'
      path: '/car/$carId'
      fullPath: '/car/$carId'
      preLoaderRoute: typeof CarCarIdImport
      parentRoute: typeof rootRoute
    }
    '/settings/profile': {
      id: '/settings/profile'
      path: '/settings/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof SettingsProfileImport
      parentRoute: typeof rootRoute
    }
    '/settings/requests': {
      id: '/settings/requests'
      path: '/settings/requests'
      fullPath: '/settings/requests'
      preLoaderRoute: typeof SettingsRequestsImport
      parentRoute: typeof rootRoute
    }
    '/user/login': {
      id: '/user/login'
      path: '/user/login'
      fullPath: '/user/login'
      preLoaderRoute: typeof UserLoginImport
      parentRoute: typeof rootRoute
    }
    '/user/register': {
      id: '/user/register'
      path: '/user/register'
      fullPath: '/user/register'
      preLoaderRoute: typeof UserRegisterImport
      parentRoute: typeof rootRoute
    }
    '/track/car/$carId': {
      id: '/track/car/$carId'
      path: '/track/car/$carId'
      fullPath: '/track/car/$carId'
      preLoaderRoute: typeof TrackCarCarIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/search': typeof SearchRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/car/$carId': typeof CarCarIdRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/requests': typeof SettingsRequestsRoute
  '/user/login': typeof UserLoginRoute
  '/user/register': typeof UserRegisterRoute
  '/track/car/$carId': typeof TrackCarCarIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/search': typeof SearchRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/car/$carId': typeof CarCarIdRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/requests': typeof SettingsRequestsRoute
  '/user/login': typeof UserLoginRoute
  '/user/register': typeof UserRegisterRoute
  '/track/car/$carId': typeof TrackCarCarIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/search': typeof SearchRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/car/$carId': typeof CarCarIdRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/settings/requests': typeof SettingsRequestsRoute
  '/user/login': typeof UserLoginRoute
  '/user/register': typeof UserRegisterRoute
  '/track/car/$carId': typeof TrackCarCarIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/search'
    | '/admin/dashboard'
    | '/car/$carId'
    | '/settings/profile'
    | '/settings/requests'
    | '/user/login'
    | '/user/register'
    | '/track/car/$carId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/search'
    | '/admin/dashboard'
    | '/car/$carId'
    | '/settings/profile'
    | '/settings/requests'
    | '/user/login'
    | '/user/register'
    | '/track/car/$carId'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/search'
    | '/admin/dashboard'
    | '/car/$carId'
    | '/settings/profile'
    | '/settings/requests'
    | '/user/login'
    | '/user/register'
    | '/track/car/$carId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  SearchRoute: typeof SearchRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  CarCarIdRoute: typeof CarCarIdRoute
  SettingsProfileRoute: typeof SettingsProfileRoute
  SettingsRequestsRoute: typeof SettingsRequestsRoute
  UserLoginRoute: typeof UserLoginRoute
  UserRegisterRoute: typeof UserRegisterRoute
  TrackCarCarIdRoute: typeof TrackCarCarIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  SearchRoute: SearchRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  CarCarIdRoute: CarCarIdRoute,
  SettingsProfileRoute: SettingsProfileRoute,
  SettingsRequestsRoute: SettingsRequestsRoute,
  UserLoginRoute: UserLoginRoute,
  UserRegisterRoute: UserRegisterRoute,
  TrackCarCarIdRoute: TrackCarCarIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$",
        "/search",
        "/admin/dashboard",
        "/car/$carId",
        "/settings/profile",
        "/settings/requests",
        "/user/login",
        "/user/register",
        "/track/car/$carId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$": {
      "filePath": "$.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/admin/dashboard": {
      "filePath": "admin/dashboard.tsx"
    },
    "/car/$carId": {
      "filePath": "car/$carId.tsx"
    },
    "/settings/profile": {
      "filePath": "settings/profile.tsx"
    },
    "/settings/requests": {
      "filePath": "settings/requests.tsx"
    },
    "/user/login": {
      "filePath": "user/login.tsx"
    },
    "/user/register": {
      "filePath": "user/register.tsx"
    },
    "/track/car/$carId": {
      "filePath": "track/car/$carId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
